{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","refreshDataForCountry","bind","state","dates","undefined","cases","deaths","recovered","country","countries","russiaDates","russiaCases","russiaDeaths","russiaRecovered","apiData","handlePickUp","componentDidMount","fetch","then","response","status","console","log","json","result","this","setState","Object","keys","forEach","x","push","label","value","e","error","countryResult","map","item","moment","date","format","confirmed","toLowerCase","getApiData","interval","containerStyles","width","className","href","col","colSm","style","labels","type","backgroundColor","title","values","borderColor","Dropdown","options","onChange","placeholder","react","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6dcad5d3.chunk.js","sourcesContent":["import React, * as react from \"react\";\r\nimport Chart from \"@bit/nexxtway.react-rainbow.chart\";\r\nimport Dataset from \"@bit/nexxtway.react-rainbow.dataset\";\r\nimport moment from \"moment\";\r\nimport { Dropdown } from \"@bit/primefaces.primereact.dropdown\";\r\nimport PrimereactStyle from \"@bit/primefaces.primereact.internal.stylelinks\";\r\nimport { Grid } from \"@bit/bit.base-ui.layout.grid-component\";\r\nimport \"./App.css\";\r\n\r\nconst apiEnpoint = `https://andrey5608.github.io/covid19/timeseries.json`;\r\n\r\nexport default class App extends react.Component {\r\n  constructor() {\r\n    super();\r\n    this.refreshDataForCountry = this.refreshDataForCountry.bind(this);\r\n    this.state = {\r\n      dates: undefined,\r\n      cases: undefined,\r\n      deaths: undefined,\r\n      recovered: undefined,\r\n      country: \"US\",\r\n      countries: undefined,\r\n      russiaDates: undefined,\r\n      russiaCases: undefined,\r\n      russiaDeaths: undefined,\r\n      russiaRecovered: undefined,\r\n      apiData: undefined,\r\n    };\r\n\r\n    this.handlePickUp = this.handlePickUp.bind(this);\r\n    this.componentDidMount = this.componentDidMount.bind(this);\r\n  }\r\n\r\n  async getApiData() {\r\n    const response = await fetch(apiEnpoint).then((response) => {\r\n      if (response.status !== 200) {\r\n        console.log(`Bad response: \"${response}\"`);\r\n      }\r\n      return response;\r\n    });\r\n\r\n    const result = await response.json();\r\n    this.setState({\r\n      apiData: result,\r\n    });\r\n    var countries = [];\r\n\r\n    try {\r\n      Object.keys(result).forEach((x) =>\r\n        countries.push({ label: x, value: x })\r\n      );\r\n      this.setState({ countries: countries });\r\n    } catch (e) {\r\n      console.error(`The country was unexpected. ${e}`);\r\n    }\r\n  }\r\n\r\n  async refreshDataForCountry(country) {\r\n    var countryResult = this.state.apiData[country];\r\n    var dates = countryResult?.map((item) => {\r\n      return moment(item.date, \"YYYY-M-DD\").format(\"DD.MM.YYYY\");\r\n    });\r\n    var cases = countryResult?.map((item) => {\r\n      return item.confirmed;\r\n    });\r\n    var deaths = countryResult?.map((item) => {\r\n      return item.deaths;\r\n    });\r\n    var recovered = countryResult?.map((item) => {\r\n      return item.recovered;\r\n    });\r\n    switch (country.toLowerCase()) {\r\n      case \"russia\":\r\n        this.setState({\r\n          russiaDates: dates,\r\n          russiaCases: cases,\r\n          russiaDeaths: deaths,\r\n          russiaRecovered: recovered,\r\n        });\r\n        break;\r\n      default:\r\n        this.setState({\r\n          dates: dates,\r\n          cases: cases,\r\n          deaths: deaths,\r\n          recovered: recovered,\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getApiData();\r\n    this.refreshDataForCountry(\"Russia\");\r\n    this.refreshDataForCountry(\"US\");\r\n  }\r\n\r\n  async handlePickUp(value) {\r\n    console.log(value);\r\n    await this.refreshDataForCountry(value);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.interval = null;\r\n  }\r\n\r\n  render() {\r\n    const containerStyles = {\r\n      width: 900,\r\n    };\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <PrimereactStyle />\r\n        <header className=\"App-header\">\r\n          COVID-19 statistics provided by\r\n          <a href=\"https://github.com/CSSEGISandData/COVID-19\">\r\n            Johns Hopkins CSSE\r\n          </a>\r\n        </header>\r\n        <div className=\"App-main\">\r\n          <Grid col={1} colSm={1}>\r\n            <div style={containerStyles}>\r\n              <h4>Russia</h4>\r\n              <div>\r\n                <Chart\r\n                  labels={this.state.russiaDates}\r\n                  type=\"line\"\r\n                  backgroundColor=\"white\"\r\n                >\r\n                  <Dataset\r\n                    title=\"Deaths\"\r\n                    values={this.state.russiaDeaths}\r\n                    backgroundColor=\"red\"\r\n                    borderColor=\"red\"\r\n                  />\r\n                  <Dataset\r\n                    title=\"Total cases\"\r\n                    values={this.state.russiaCases}\r\n                    backgroundColor=\"whitesmoke\"\r\n                    borderColor=\"whitesmoke\"\r\n                  />\r\n                  <Dataset\r\n                    title=\"Recovered\"\r\n                    values={this.state.russiaRecovered}\r\n                    backgroundColor=\"green\"\r\n                    borderColor=\"green\"\r\n                  />\r\n                </Chart>\r\n              </div>\r\n            </div>\r\n            <div style={containerStyles}>\r\n              <h4>Others</h4>\r\n              <div>\r\n                <Chart\r\n                  labels={this.state.dates}\r\n                  type=\"line\"\r\n                  backgroundColor=\"white\"\r\n                >\r\n                  <Dataset\r\n                    title=\"Deaths\"\r\n                    values={this.state.deaths}\r\n                    backgroundColor=\"red\"\r\n                    borderColor=\"red\"\r\n                  />\r\n                  <Dataset\r\n                    title=\"Total cases\"\r\n                    values={this.state.cases}\r\n                    backgroundColor=\"whitesmoke\"\r\n                    borderColor=\"whitesmoke\"\r\n                  />\r\n                  <Dataset\r\n                    title=\"Recovered\"\r\n                    values={this.state.recovered}\r\n                    backgroundColor=\"green\"\r\n                    borderColor=\"green\"\r\n                  />\r\n                </Chart>\r\n              </div>\r\n              <div>\r\n                <Dropdown\r\n                  style={{ width: 150 }}\r\n                  value={this.state.country}\r\n                  options={this.state.countries}\r\n                  onChange={(e) => {\r\n                    this.setState({ country: e.value });\r\n                    this.handlePickUp(e.value);\r\n                  }}\r\n                  placeholder=\"Select a country\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}