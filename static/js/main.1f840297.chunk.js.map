{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","refreshDataForCountry","bind","state","dates","undefined","cases","deaths","recovered","country","countries","handlePickUp","componentDidMount","fetch","then","response","status","Error","json","result","Object","keys","forEach","x","push","label","value","this","setState","item","moment","date","format","confirmed","e","console","error","alert","log","interval","className","href","style","width","labels","type","backgroundColor","title","values","borderColor","Dropdown","options","onChange","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"4XAUqBA,G,wDACnB,aAAe,IAAD,8BACZ,gBACKC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBAC7B,EAAKC,MAAQ,CACXC,WAAOC,EACPC,WAAOD,EACPE,YAAQF,EACRG,eAAWH,EACXI,QAAS,SACTC,eAAWL,GAGb,EAAKM,aAAe,EAAKA,aAAaT,KAAlB,gBACpB,EAAKU,kBAAoB,EAAKA,kBAAkBV,KAAvB,gBAbb,E,2GAgBcO,G,mGACHI,MApBX,wDAoB6BC,MAAK,SAACC,GAC7C,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAJ,yBAA4BF,EAA5B,MAER,OAAOA,K,cAJHA,E,gBAOeA,EAASG,O,OAAxBC,E,OAEFT,EAAY,GACZN,EAAQ,GACRE,EAAQ,GACRC,EAAS,GACTC,EAAY,GAEhB,IACEY,OAAOC,KAAKF,GAAQG,SAAQ,SAACC,GAAD,OAC1Bb,EAAUc,KAAK,CAAEC,MAAOF,EAAGG,MAAOH,OAEpCI,KAAKC,SAAS,CAAElB,UAAWA,IAC3BS,EAAOV,GAASa,SAAQ,SAACO,GACvBzB,EAAMoB,KAAKM,IAAOD,EAAKE,KAAM,aAAaC,OAAO,eACjD1B,EAAMkB,KAAKK,EAAKI,WAChB1B,EAAOiB,KAAKK,EAAKtB,QACjBC,EAAUgB,KAAKK,EAAKrB,cAEtB,MAAO0B,GACPC,QAAQC,MAAR,uBAA8B3B,EAA9B,6BAA0DyB,IAC1DG,MAAM,gBAAD,OAAiB5B,EAAjB,qBAGPkB,KAAKC,SAAS,CACZxB,MAAOA,EACPE,MAAOA,EACPC,OAAQA,EACRC,UAAWA,I,4QAKPmB,KAAK1B,sBAAsB0B,KAAKxB,MAAMM,S,kLAG3BiB,G,wEACjBS,QAAQG,IAAIZ,G,SACNC,KAAK1B,sBAAsByB,G,oJAIjCC,KAAKY,SAAW,O,+BAGR,IAAD,OAKP,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,MACA,4BAAQA,UAAU,cAAlB,kCAEE,uBAAGC,KAAK,8CAAR,uBAIF,yBAAKD,UAAU,YACb,yBAAKE,MAda,CACtBC,MAAO,MAcD,6BACE,kBAAC,IAAD,CACEC,OAAQjB,KAAKxB,MAAMC,MACnByC,KAAK,OACLC,gBAAgB,SAEhB,kBAAC,IAAD,CACEC,MAAM,SACNC,OAAQrB,KAAKxB,MAAMI,OACnBuC,gBAAgB,MAChBG,YAAY,QAEd,kBAAC,IAAD,CACEF,MAAM,cACNC,OAAQrB,KAAKxB,MAAMG,MACnBwC,gBAAgB,aAChBG,YAAY,eAEd,kBAAC,IAAD,CACEF,MAAM,YACNC,OAAQrB,KAAKxB,MAAMK,UACnBsC,gBAAgB,QAChBG,YAAY,YAIlB,6BACE,kBAACC,EAAA,SAAD,CACER,MAAO,CAAEC,MAAO,KAChBjB,MAAOC,KAAKxB,MAAMM,QAClB0C,QAASxB,KAAKxB,MAAMO,UACpB0C,SAAU,SAAClB,GACT,EAAKN,SAAS,CAAEnB,QAASyB,EAAER,QAC3B,EAAKf,aAAauB,EAAER,QAEtB2B,YAAY,6B,GAzHKC,cCEbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLD,QAAQC,MAAMA,EAAMmC,c","file":"static/js/main.1f840297.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"@bit/nexxtway.react-rainbow.chart\";\nimport Dataset from \"@bit/nexxtway.react-rainbow.dataset\";\nimport moment from \"moment\";\nimport { Dropdown } from \"@bit/primefaces.primereact.dropdown\";\nimport PrimereactStyle from \"@bit/primefaces.primereact.internal.stylelinks\";\nimport \"./App.css\";\n\nconst apiEnpoint = `https://andrey5608.github.io/covid19/timeseries.json`;\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.refreshDataForCountry = this.refreshDataForCountry.bind(this);\n    this.state = {\n      dates: undefined,\n      cases: undefined,\n      deaths: undefined,\n      recovered: undefined,\n      country: \"Russia\",\n      countries: undefined,\n    };\n\n    this.handlePickUp = this.handlePickUp.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  async refreshDataForCountry(country) {\n    const response = await fetch(apiEnpoint).then((response) => {\n      if (response.status !== 200) {\n        throw new Error(`Bad response: \"${response}\"`);\n      }\n      return response;\n    });\n\n    const result = await response.json();\n\n    var countries = [];\n    var dates = [];\n    var cases = [];\n    var deaths = [];\n    var recovered = [];\n\n    try {\n      Object.keys(result).forEach((x) =>\n        countries.push({ label: x, value: x })\n      );\n      this.setState({ countries: countries });\n      result[country].forEach((item) => {\n        dates.push(moment(item.date, \"YYYY-M-DD\").format(\"DD.MM.YYYY\"));\n        cases.push(item.confirmed);\n        deaths.push(item.deaths);\n        recovered.push(item.recovered);\n      });\n    } catch (e) {\n      console.error(`The country '${country}' was unexpected. ${e}`);\n      alert(`The country '${country}' was unexpected`);\n    }\n\n    this.setState({\n      dates: dates,\n      cases: cases,\n      deaths: deaths,\n      recovered: recovered,\n    });\n  }\n\n  async componentDidMount() {\n    await this.refreshDataForCountry(this.state.country);\n  }\n\n  async handlePickUp(value) {\n    console.log(value);\n    await this.refreshDataForCountry(value);\n  }\n\n  componentWillUnmount() {\n    this.interval = null;\n  }\n\n  render() {\n    const containerStyles = {\n      width: 900,\n    };\n\n    return (\n      <div className=\"App\">\n        <PrimereactStyle />\n        <header className=\"App-header\">\n          COVID-19 statistics provided by\n          <a href=\"https://github.com/CSSEGISandData/COVID-19\">\n            Johns Hopkins CSSE\n          </a>\n        </header>\n        <div className=\"App-main\">\n          <div style={containerStyles}>\n            <div>\n              <Chart\n                labels={this.state.dates}\n                type=\"line\"\n                backgroundColor=\"white\"\n              >\n                <Dataset\n                  title=\"Deaths\"\n                  values={this.state.deaths}\n                  backgroundColor=\"red\"\n                  borderColor=\"red\"\n                />\n                <Dataset\n                  title=\"Total cases\"\n                  values={this.state.cases}\n                  backgroundColor=\"whitesmoke\"\n                  borderColor=\"whitesmoke\"\n                />\n                <Dataset\n                  title=\"Recovered\"\n                  values={this.state.recovered}\n                  backgroundColor=\"green\"\n                  borderColor=\"green\"\n                />\n              </Chart>\n            </div>\n            <div>\n              <Dropdown\n                style={{ width: 150 }}\n                value={this.state.country}\n                options={this.state.countries}\n                onChange={(e) => {\n                  this.setState({ country: e.value });\n                  this.handlePickUp(e.value);\n                }}\n                placeholder=\"Select a country\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}