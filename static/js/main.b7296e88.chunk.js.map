{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","refreshDataForCountry","bind","state","dates","undefined","cases","deaths","recovered","country","handleChange","componentDidMount","fetch","then","response","status","Error","res","json","result","toLowerCase","Russia","map","item","moment","date","format","confirmed","US","console","error","this","setState","event","target","value","interval","className","href","style","width","labels","type","title","values","backgroundColor","borderColor","onChange","name","defaultChecked","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oWAQqBA,G,wDACnB,aAAe,IAAD,8BACZ,gBACKC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBAC7B,EAAKC,MAAQ,CACXC,WAAOC,EACPC,WAAOD,EACPE,YAAQF,EACRG,eAAWH,EACXI,QAAS,UAEX,EAAKC,aAAe,EAAKA,aAAaR,KAAlB,gBACpB,EAAKS,kBAAoB,EAAKA,kBAAkBT,KAAvB,gBAXb,E,2GAccO,G,iGACRG,MAlBN,wDAkBwBC,MAAK,SAACC,GACxC,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAJ,yBAA4BF,EAA5B,MAER,OAAOA,K,cAJHG,E,gBAMeA,EAAIC,O,OAAnBC,E,YAOEV,EAAQW,c,OACT,W,OAcA,Q,+BAbHhB,EAAQe,EAAOE,OAAOC,KAAI,SAAUC,GAClC,OAAOC,IAAOD,EAAKE,KAAM,aAAaC,OAAO,iBAE/CpB,EAAQa,EAAOE,OAAOC,KAAI,SAAUC,GAClC,OAAOA,EAAKI,aAEdpB,EAASY,EAAOE,OAAOC,KAAI,SAAUC,GACnC,OAAOA,EAAKhB,UAEdC,EAAYW,EAAOE,OAAOC,KAAI,SAAUC,GACtC,OAAOA,EAAKf,a,oCAIdJ,EAAQe,EAAOS,GAAGN,KAAI,SAAUC,GAC9B,OAAOC,IAAOD,EAAKE,MAAMC,OAAO,iBAElCpB,EAAQa,EAAOS,GAAGN,KAAI,SAAUC,GAC9B,OAAOA,EAAKI,aAEdpB,EAASY,EAAOS,GAAGN,KAAI,SAAUC,GAC/B,OAAOA,EAAKhB,UAEdC,EAAYW,EAAOS,GAAGN,KAAI,SAAUC,GAClC,OAAOA,EAAKf,a,oCAIdqB,QAAQC,MAAMrB,EAAU,mB,6BAI5BsB,KAAKC,SAAS,CACZ5B,MAAOA,EACPE,MAAOA,EACPC,OAAQA,EACRC,UAAWA,I,4QAKPuB,KAAK9B,sBAAsB,U,kLAGhBgC,G,oEACwB,WAArCA,EAAMC,OAAOC,MAAMf,c,gCACfW,KAAK9B,sBAAsB,U,6CAE3B8B,KAAK9B,sBAAsB,O,oJAKnC8B,KAAKK,SAAW,O,+BAGR,IAAD,OAKP,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,kCACkC,IAChC,uBAAGC,KAAK,8CAAR,uBAIF,yBAAKD,UAAU,YACb,yBAAKE,MAba,CACtBC,MAAO,MAaD,6BACE,kBAAC,IAAD,CAAOC,OAAQV,KAAK5B,MAAMC,MAAOsC,KAAK,QACpC,kBAAC,IAAD,CACEC,MAAM,SACNC,OAAQb,KAAK5B,MAAMI,OACnBsC,gBAAgB,MAChBC,YAAY,QAEd,kBAAC,IAAD,CACEH,MAAM,cACNC,OAAQb,KAAK5B,MAAMG,MACnBuC,gBAAgB,aAChBC,YAAY,eAEd,kBAAC,IAAD,CACEH,MAAM,YACNC,OAAQb,KAAK5B,MAAMK,UACnBqC,gBAAgB,QAChBC,YAAY,YAIlB,yBAAKC,SAAU,SAACd,GAAD,OAAW,EAAKvB,aAAauB,KAC1C,2BACES,KAAK,QACLP,MAAM,SACNa,KAAK,UACLC,eAAe,YALnB,SAQE,2BAAOP,KAAK,QAAQP,MAAM,MAAMa,KAAK,YARvC,yB,GA5HqBE,cCIbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLD,QAAQC,MAAMA,EAAMqC,c","file":"static/js/main.b7296e88.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"@bit/nexxtway.react-rainbow.chart\";\nimport Dataset from \"@bit/nexxtway.react-rainbow.dataset\";\nimport moment from \"moment\";\nimport './App.css';\n\nconst apiEnpoint = `https://andrey5608.github.io/covid19/timeseries.json`;\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.refreshDataForCountry = this.refreshDataForCountry.bind(this);\n    this.state = {\n      dates: undefined,\n      cases: undefined,\n      deaths: undefined,\n      recovered: undefined,\n      country: \"russia\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  async refreshDataForCountry(country) {\n    const res = await fetch(apiEnpoint).then((response) => {\n      if (response.status !== 200) {\n        throw new Error(`Bad response: \"${response}\"`);\n      }\n      return response;\n    });\n    const result = await res.json();\n\n    var dates;\n    var cases;\n    var deaths;\n    var recovered;\n\n    switch (country.toLowerCase()) {\n      case \"russia\":\n        dates = result.Russia.map(function (item) {\n          return moment(item.date, \"YYYY-M-DD\").format(\"DD.MM.YYYY\");\n        });\n        cases = result.Russia.map(function (item) {\n          return item.confirmed;\n        });\n        deaths = result.Russia.map(function (item) {\n          return item.deaths;\n        });\n        recovered = result.Russia.map(function (item) {\n          return item.recovered;\n        });\n        break;\n      case \"usa\":\n        dates = result.US.map(function (item) {\n          return moment(item.date).format(\"DD.MM.YYYY\");\n        });\n        cases = result.US.map(function (item) {\n          return item.confirmed;\n        });\n        deaths = result.US.map(function (item) {\n          return item.deaths;\n        });\n        recovered = result.US.map(function (item) {\n          return item.recovered;\n        });\n        break;\n      default:\n        console.error(country + \" was unexpected\");\n        break;\n    }\n\n    this.setState({\n      dates: dates,\n      cases: cases,\n      deaths: deaths,\n      recovered: recovered,\n    });\n  }\n\n  async componentDidMount() {\n    await this.refreshDataForCountry(\"russia\");\n  }\n\n  async handleChange(event) {\n    if (event.target.value.toLowerCase() === \"russia\") {\n      await this.refreshDataForCountry(\"russia\");\n    } else {\n      await this.refreshDataForCountry(\"usa\");\n    }\n  }\n\n  componentWillUnmount() {\n    this.interval = null;\n  }\n\n  render() {\n    const containerStyles = {\n      width: 900\n    };\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          COVID-19 statistics provided by{\" \"}\n          <a href=\"https://github.com/CSSEGISandData/COVID-19\">\n            Johns Hopkins CSSE\n          </a>\n        </header>\n        <div className=\"App-main\">\n          <div style={containerStyles}>\n            <div>\n              <Chart labels={this.state.dates} type=\"line\">\n                <Dataset\n                  title=\"Deaths\"\n                  values={this.state.deaths}\n                  backgroundColor=\"red\"\n                  borderColor=\"red\"\n                />\n                <Dataset\n                  title=\"Total cases\"\n                  values={this.state.cases}\n                  backgroundColor=\"whitesmoke\"\n                  borderColor=\"whitesmoke\"\n                />\n                <Dataset\n                  title=\"Recovered\"\n                  values={this.state.recovered}\n                  backgroundColor=\"green\"\n                  borderColor=\"green\"\n                />\n              </Chart>\n            </div>\n            <div onChange={(event) => this.handleChange(event)}>\n              <input\n                type=\"radio\"\n                value=\"Russia\"\n                name=\"country\"\n                defaultChecked=\"checked\"\n              />\n              Russia\n              <input type=\"radio\" value=\"USA\" name=\"country\" /> United States\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}